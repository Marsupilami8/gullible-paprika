<#

.SYNOPSIS
    Powershell Script to conduct a hash verification of digital evidence E01 & S01 images using AccessData's 
    legacy Windows FTK Imager Command Line Interface tool.

.DESCRIPTION
    The VerifyImageHash.ps1 Powershell script is a command line executable wrapper used to conduct a recursive MD5 
    and SHA1 hash verification of E01/S01 forensic images in a drive folder using AccessData's legacy Windows FTK 
    Imager Command Line Interface tool (version 3.1.1). The script uses background jobs to run multiple hash 
    verifications at a time. The output is a text file "yyyyMMddTHHmmss-ImageHashVerification.txt" containing the 
    notes from each of the forensic image acquisitions and the results of the computed MD5 and SHA1 hash 
    verifications.

.PARAMETER TargetFolder 
    Volume path to folder containing forensic images.
 
.PARAMETER LogPath 
    Volume path to folder where the verification file log will be outputted.

.EXAMPLE
    VerifyImageHash.ps1

    Copy the script to the root folder containing all the forensic images. Open a Powershell terminal to the root 
    location in the uppermost root folder of all the E01 and S01 images. This can be done, for example, by typing 
    "powershell" in the folder path bar in an Explorer window. The verification text file output will be generated 
    in the root folder from where the script was run. The default image containers are assumed to be in the same 
    folder as the script.
 
.EXAMPLE
    VerifyImageHash.ps1 -TargetFolder "D:\IMAGES\TX1\" -LogPath "E:\DFIR\Case 123\Image Logs\"
    
    Open a Powershell terminal. Run the script and provide the target folder's path to the volume and root folder 
    containing the forensic images. Designate the output folder where the verification text file will be generated.

.EXAMPLE
    VerifyImageHash.ps1 -TargetFolder "D:\IMAGES\TX1\"    

    Open a Powershell terminal. Run the script and provide the target folder's path to the volume and root folder 
    containing the forensic images. The verification text file output will be generated in the folder from where 
    the script was run.

.EXAMPLE
    VerifyImageHash.ps1 -LogPath "E:\DFIR\Case 123\Image Logs\"

    Open a Powershell terminal. Run the script and provide the output folder where the verification text file will
    be generated. The default image containers are assumed to be in the same folder as the script.

.INPUTS
    Folders containing E01 or S01 formatted digital forensic images are the input objects. 
     
.OUTPUTS
    Date and time stamped log text file of aggregated output of the hash verifications from AccessData FTK Imager 
    executable command line tool (version 3.1.1) in the format of "yyyyMMddTHHmmss-ImageHashVerification.txt". File
    will be located in the root folder from where the script was run. Note that this script can append the hash 
    verification message confirmation to the .TXT file originally generated by any FTK Imager versions used to 
    image a drive or volume. This .TXT file is located in the folder where the E01 segments are found and has the 
    same naming convention as the E01 filename. The script will not create this .TXT file if it was not there to 
    begin with, rather the results of the verification will solely be available in the generated 
    "yyyymmddhhmmss-ImageHashVerification.txt" formatted file. This script also does console outputs notifying 
    users of files being verified and files that have been excluded from verification.

.LINK
    https://accessdata.com/product-download/windows-32bit-3-1-1
    https://docs.microsoft.com/en-us/previous-versions/office/developer/sharepoint-2010/ee537574(v=office.14)
    https://helpdeskgeek.com/windows-10/add-windows-path-environment-variable/
    https://github.com/libyal/libewf
    https://github.com/Marsupilami8/gullible-paprika/

.NOTES
    The FTK Imager command line tool (version 3.1.1) must be downloaded from Accessdata and installed to a folder 
    of your choice (See link). It is recommended that the path to the "ftkimager.exe" executable be placed in the
    system's PATH environment variable; otherwise, its explicit path must be hardcoded in this script. See link for
    assistance on adding the executable's path to the PATH environment variable.
    
    The FTK Imager tool does not work to verify images in AD1, L01, DD, or any other formats. This is a limitation 
    of "ftkimager.exe" and not the powershell script. Other than Linux command tools, e.g. ewf,  no other windows 
    command line tools exists to verify image types such as E01x, L01, AD1, etc ... 
    
    The number of background jobs is limited to 20. When a max is achieved, no other jobs are started until a job 
    is freed, after a timed waiting period. It is conceivable that this ceiling can be raised; however, no stress 
    tests have been done. Use at your own risk. 
    
    The script outputs the ftkimager.exe command line stderr messages to stdout, which will be captured in the log 
    text file. This does not impact any results. 

    Testing to pipe to the VerifyImageHash.ps1 script has not been developed or tested.
    --------------------------------------------------------------------------------------------------------------
    Author:  Marsupilami8
    Date:    2020-10-25
    Version: 2.2

#>

param (
    [string]$TargetFolder = ".",
    [string]$LogPath = "."
    )

# File extension definitions
$FTKImagerSupportedImageTypes = ".e01", ".s01"
$NonFTKImagerSupportedImageTypes = ".e01x",".l01x", ".ad1", ".l01", ".dd", ".001", ".zip"

# Forensic image extensions to search for when running the script
$TargetExtensions = $FTKImagerSupportedImageTypes + $NonFTKImagerSupportedImageTypes | Foreach-Object{ "{0}{1}" -f '*', $_}        # Prepend '*' to extension for later Get-ChildItem wildcard search

# Test if path provided at command line argument is a folder
if(!(Test-Path $TargetFolder -PathType Container)){

    Write-Host "$TargetFolder is invalid. Please provide the path to the root folder of the forensic images."
    exit
}

# Test and create path/name of log file
if (!(Test-Path $LogPath -PathType Container)){

    Write-Host "$LogPath is invalid. Please provide a proper path to a folder."
    exit
} 
else {

    $LogFilename = (Get-Date -Format s).Replace(":","") + "-ImageHashVerification.txt"  #Outputs date as "yyyyMMddTHHmmss"
    $LogFile = New-Item –Path $LogPath -Name $LogFilename -ItemType File
}

# Find all forensic image types from target folder.  
$ForensicImages = Get-ChildItem $TargetFolder -Recurse -Include $TargetExtensions

if (!$ForensicImages) {

    $Msg = "No forensic image file types were found in the $LogPath folder path to verify."
    Write-Host $Msg
    (Get-Date -Format s)  + "`r`n$Msg"| Out-File -Append -FilePath $LogFile -Encoding ascii
    exit
}

# Create the construct for the computed hash verification output and acquisition notes 
$Script =  { 

    Param($File)
 
     if(Test-Path $File){
 
         $Header = (Get-Date -Format s)  + "`r`n$File`r`n"
         $ImageInfo = cmd.exe /c ftkimager.exe $File --print-info '2>&1' | Out-String    
         $HashVerification = cmd.exe /c ftkimager.exe $File --verify --quiet '2>&1' | Out-String
         $Footer = "`r`n---------------------------------------------------------`r`n"  
         $Results = $Header + $ImageInfo + $HashVerification + $Footer 
     }
     else {
 
         $Results = "Error: $File Not Found."
         exit
     }
    
    Write-Output -InputObject $Results
    }

# Using ArrayList for better results and extensibility
$SupportedForensicImages = New-Object -TypeName "System.Collections.ArrayList"      
$NonSupportedForensicImages = New-Object -TypeName "System.Collections.ArrayList"

# Identify forensic image types supported by FTK Imager, such as E01 and S01 format, to run verification script.
foreach($Image in $ForensicImages){

 if ($Image.Extension -IIN $FTKImagerSupportedImageTypes) {

    $SupportedForensicImages.Add($Image) | Out-Null 
    
 } elseif ($Image.Extension -IIN $NonFTKImagerSupportedImageTypes){

    $Msg =  (Get-Date -Format s) + "`r`n$Image`r`nThe verification of this image type is unsupported. " `
       + "Please verify using an alternate method." `
       + "`r`n---------------------------------------------------------`r`n" 

    Out-File -Append -FilePath $LogFile -InputObject $Msg -Encoding ascii

    $NonSupportedForensicImages.Add($Image) | Out-Null  # Prevents ArrayList index number from echoing to console

 } else {

    continue
 }
}

# Update to console on images being verified
if($NonSupportedForensicImages.Count -gt 0) {
    Write-Host "`r`nThe verification of the following image types are UNSUPPORTED by FTK Imager: `
        `r`n$($NonSupportedForensicImages -join "`r`n")`r`n" 
}

if($SupportedForensicImages.Count -gt 0) {
    Write-Host "`r`nVerifying the following images ... `
        `r`n$($SupportedForensicImages -join "`r`n")`r`n" -ForegroundColor Yellow

# Limit to no greater than 20 background jobs and check again in 3 min for freed jobs 
    foreach($Image in $SupportedForensicImages){

        while ((Get-Job -State Running).Count -ge 20) {
        Start-Sleep -Seconds 180;
    }

    Start-Job -Scriptblock $Script -ArgumentList $Image.FullName -Name (Split-Path $Image -Leaf)
}

# Push out background job results to logged date/time stamped file.
Get-Job | Wait-Job | Receive-Job | Out-File -Append -FilePath $LogFile -Encoding ascii

} else {

    Write-Host "`r`nNo supported image file hash verifications were completed." `
    "See the $LogFile file." 
    exit
}

Write-Host "`r`nImage hash verifications completed. See the $LogFile file" `
    "for the results." -ForegroundColor Green
